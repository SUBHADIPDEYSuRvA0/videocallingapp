<!DOCTYPE html>
<html>
<head>
  <title>Room - <%= code %></title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <style>
    body { background: #e3f2fd; text-align: center; }
    #videos { display: flex; justify-content: center; flex-wrap: wrap; margin-top: 2rem; }
    video {
      border: 3px solid #007bff;
      border-radius: 10px;
      width: 100%; /* Set width to 100% to fill the container */
      max-width: 100%;
      height: auto;
    }

    /* For larger screens (desktop/tablet), show videos side by side */
    @media (min-width: 768px) {
      .video-container {
        width: 48%; /* Adjust the width to 48% for side-by-side */
      }
    }

    /* For smaller screens (mobile), videos will be stacked vertically */
    @media (max-width: 767px) {
      .video-container {
        width: 100%; /* Full width on mobile */
        margin-bottom: 1rem; /* Add spacing between videos */
      }
    }
  </style>
</head>
<body>
  <h3 class="my-3">Room Code: <%= code %></h3>
  <div id="videos" class="container">
    <!-- Local Video (Your Video) -->
    <div class="video-container">
      <video id="localVideo" autoplay muted></video>
      <div>
        <strong>You</strong> <!-- Removed email display -->
      </div>
    </div>
    <!-- Remote Video (Other Participant's Video) -->
    <div class="video-container">
      <video id="remoteVideo" autoplay></video>
      <div><strong id="remoteUserName">Waiting...</strong></div>
    </div>
  </div>
  <button id="hangupBtn" class="btn btn-danger mt-3">Hang Up</button>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const roomId = '<%= code %>';
    const userId = Math.random().toString(36).substr(2, 9);

    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const remoteUserName = document.getElementById('remoteUserName');

    let peer;

    navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
      localVideo.srcObject = stream;

      socket.emit('join-room', roomId, userId);

      socket.on('user-connected', (id, name) => {
        remoteUserName.textContent = name;
        callUser(id, stream);
      });

      socket.on('offer', (senderId, offer) => {
        peer = new RTCPeerConnection();
        stream.getTracks().forEach(track => peer.addTrack(track, stream));
        peer.setRemoteDescription(new RTCSessionDescription(offer));
        peer.createAnswer().then(answer => {
          peer.setLocalDescription(answer);
          socket.emit('answer', roomId, userId, answer);
        });
        peer.ontrack = e => remoteVideo.srcObject = e.streams[0];
      });

      socket.on('answer', (senderId, answer) => {
        peer.setRemoteDescription(new RTCSessionDescription(answer));
      });

      socket.on('ice-candidate', (senderId, candidate) => {
        peer.addIceCandidate(new RTCIceCandidate(candidate));
      });
    });

    function callUser(id, stream) {
      peer = new RTCPeerConnection();
      stream.getTracks().forEach(track => peer.addTrack(track, stream));
      peer.createOffer().then(offer => {
        peer.setLocalDescription(offer);
        socket.emit('offer', roomId, userId, offer);
      });
      peer.ontrack = e => remoteVideo.srcObject = e.streams[0];
      peer.onicecandidate = e => {
        if (e.candidate) socket.emit('ice-candidate', roomId, userId, e.candidate);
      };
    }

    document.getElementById('hangupBtn').onclick = () => {
      if (peer) peer.close();
      window.location.href = '/';
    };
  </script>
</body>
</html>
